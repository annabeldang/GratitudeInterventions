<<<<<<< HEAD
std_errors <- data %>%
group_by(condition) %>%
summarize(Standard_Error = sd(sad_all) / sqrt(n()))
# Create new dataframe
=======
)
dosage_data$condition <- factor(dosage_data$condition)
happy_model <- model <- lm(gratitude_mean ~ happy_mean, data = dosage_data)
print(happy_model)
# Create scatter plot with linear regression line
<<<<<<< HEAD
happy_plot <- ggplot(dosage_data, aes(x = gratitude_mean, y = happy_mean, color = condition)) +
=======
happy_plot_2 <- ggplot(dosage_data, aes(x = gratitude_mean, y = happy_mean, color = condition)) +
>>>>>>> 9714c8d9522c404ed68d6b1ad2376f2153cfb9ea
geom_point(size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "red", size = 0.5) +
geom_errorbar(aes(ymin = happy_mean - happy_se, ymax = happy_mean + happy_se), width = 0.1) +
scale_color_manual(values = condition_color, labels = condition_name,
name = "Condition") +  # Assign specific colors
<<<<<<< HEAD
labs(title = "Positive Affect (PA)",
x = "Mean Gratitude",
y = "Mean PA") +
=======
labs(title = "Study 2",
x = "Mean Self-Reported Gratitude",
y = "Mean Self-Reported PA") +
>>>>>>> 9714c8d9522c404ed68d6b1ad2376f2153cfb9ea
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),  # Center the plot title
legend.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()# Set background color to white
)
# Print the plot
<<<<<<< HEAD
print(happy_plot)
optimistic_mean<-data%>%group_by(condition)%>%summarize(Mean=mean(optimistic_all))
print(optimistic_mean)
# Calculate mean for 'optimistic_all' by 'condition' and subtract a value
cond.means_2 <- data %>%
group_by(condition) %>%
summarize(Mean = mean(optimistic_all)) %>%
mutate(Mean = Mean - 4.266447)
# Calculate standard error for 'optimistic_all' by 'condition'
std_errors <- data %>%
group_by(condition) %>%
summarize(Standard_Error = sd(optimistic_all) / sqrt(n()))
# Combine the dataframes
dosage_data <- data.frame(
condition = cond.means_1$condition,
gratitude_mean = cond.means_1$Mean,
optimistic_mean = cond.means_2$Mean,
optimistic_se = std_errors$Standard_Error
)
dosage_data$condition <- factor(dosage_data$condition)
# Create scatter plot with linear regression line
optimistic_plot <- ggplot(dosage_data, aes(x = gratitude_mean, y = optimistic_mean, color = condition)) +
geom_point(size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "red", size = 0.5) +
geom_errorbar(aes(ymin = optimistic_mean - optimistic_se, ymax = optimistic_mean + optimistic_se), width = 0.1) +
scale_color_manual(values = condition_color, labels = condition_name,
name = "Condition") +  # Assign specific colors
labs(title = "Optimism",
x = "Mean Gratitude",
y = "Mean Optimism") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),  # Center the plot title
legend.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()# Set background color to white
)
# Print the plot
print(optimistic_plot)
=======
print(happy_plot_2)
>>>>>>> 9714c8d9522c404ed68d6b1ad2376f2153cfb9ea
sad_mean<-data%>%group_by(condition)%>%summarize(Mean=mean(sad_all))
print(sad_mean)
# Calculate mean for 'sad_all' by 'condition' and subtract a value
cond.means_2 <- data %>%
group_by(condition) %>%
summarize(Mean = mean(sad_all)) %>%
mutate(Mean = Mean - 2.740132)
# Calculate standard error for 'sad_all' by 'condition'
std_errors <- data %>%
group_by(condition) %>%
summarize(Standard_Error = sd(sad_all) / sqrt(n()))
# Combine the dataframes
>>>>>>> 3cad3b0fdd695945dd571f7ab334f761d1246a76
dosage_data <- data.frame(
condition = cond.means_1$condition,
gratitude_mean = cond.means_1$Mean,
sad_mean = cond.means_2$Mean,
sad_se = std_errors$Standard_Error
)
dosage_data$condition <- factor(dosage_data$condition)
<<<<<<< HEAD
# Fit linear regression model
lm_model <- lm(gratitude_mean ~ sad_mean, data = dosage_data)
summary(lm_model)
# Create scatter plot with linear regression line
sad_plot <- ggplot(dosage_data, aes(x = gratitude_mean, y = sad_mean, color = condition)) +
=======
# Create scatter plot with linear regression line
<<<<<<< HEAD
sad_plot <- ggplot(dosage_data, aes(x = gratitude_mean, y = sad_mean, color = condition)) +
=======
sad_plot_2 <- ggplot(dosage_data, aes(x = gratitude_mean, y = sad_mean, color = condition)) +
>>>>>>> 9714c8d9522c404ed68d6b1ad2376f2153cfb9ea
geom_point(size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "red", size = 0.5) +
geom_errorbar(aes(ymin = sad_mean - sad_se, ymax = sad_mean + sad_se), width = 0.1) +
scale_color_manual(values = condition_color, labels = condition_name,
name = "Condition") +  # Assign specific colors
<<<<<<< HEAD
labs(title = "Negative Affect (NA)",
x = "Mean Gratitude",
y = "Mean NA") +
=======
labs(title = "Study 2",
x = "Mean Self-Reported Gratitude",
y = "Mean Self-Reported NA") +
>>>>>>> 9714c8d9522c404ed68d6b1ad2376f2153cfb9ea
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),  # Center the plot title
legend.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()# Set background color to white
)  +
scale_y_continuous(labels = scales::number_format(accuracy = 0.1, decimal.mark = ".", scale = 1))
# Print the plot
<<<<<<< HEAD
print(sad_plot)
indebted_mean<-data%>%group_by(condition)%>%summarize(Mean=mean(indebted_all))
print(indebted_mean)
# Calculate mean for 'indebted_all' by 'condition' and subtract a value
cond.means_2 <- data %>%
group_by(condition) %>%
summarize(Mean = mean(indebted_all)) %>%
mutate(Mean = Mean - 3.036184)
# Calculate standard error for 'indebted_all' by 'condition'
std_errors <- data %>%
group_by(condition) %>%
summarize(Standard_Error = sd(indebted_all) / sqrt(n()))
# Combine the dataframes
dosage_data <- data.frame(
condition = cond.means_1$condition,
gratitude_mean = cond.means_1$Mean,
indebted_mean = cond.means_2$Mean,
indebted_se = std_errors$Standard_Error
)
dosage_data$condition <- factor(dosage_data$condition)
# Create scatter plot with linear regression line
indebted_plot <- ggplot(dosage_data, aes(x = gratitude_mean, y = indebted_mean, color = condition)) +
>>>>>>> 3cad3b0fdd695945dd571f7ab334f761d1246a76
geom_point(size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "red", size = 0.5) +
geom_errorbar(aes(ymin = sad_mean - sad_se, ymax = sad_mean + sad_se), width = 0.1) +
scale_color_manual(values = condition_color, labels = condition_name,
name = "Condition") +
labs(title = "Study 1",
x = "Mean Self-Reported Gratitude",
y = "Mean Self-Reported NA") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
# Print the plot
<<<<<<< HEAD
print(sad_plot)
# Calculate mean for 'ls_total' by 'condition'
=======
print(indebted_plot)
guilty_mean<-data%>%group_by(condition)%>%summarize(Mean=mean(guilty))
print(guilty_mean)
# Calculate mean for 'guilty' by 'condition' and subtract a value
cond.means_2 <- data %>%
group_by(condition) %>%
summarize(Mean = mean(guilty)) %>%
mutate(Mean = Mean - 1.993421)
# Calculate standard error for 'guilty' by 'condition'
std_errors <- data %>%
group_by(condition) %>%
summarize(Standard_Error = sd(guilty) / sqrt(n()))
# Combine the dataframes
dosage_data <- data.frame(
condition = cond.means_1$condition,
gratitude_mean = cond.means_1$Mean,
guilty_mean = cond.means_2$Mean,
guilty_se = std_errors$Standard_Error
)
dosage_data$condition <- factor(dosage_data$condition)
# Create scatter plot with linear regression line
guilty_plot <- ggplot(dosage_data, aes(x = gratitude_mean, y = guilty_mean, color = condition)) +
geom_point(size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "red", size = 0.5) +
geom_errorbar(aes(ymin = guilty_mean - guilty_se, ymax = guilty_mean + guilty_se), width = 0.1) +
scale_color_manual(values = condition_color, labels = condition_name,
name = "Condition") +  # Assign specific colors
labs(title = "Mean Gratitude vs. Mean Guilt",
x = "Mean Gratitude",
y = "Mean Guilt") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),  # Center the plot title
legend.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()# Set background color to white
)
# Print the plot
print(guilty_plot)
envy_mean<-data%>%group_by(condition)%>%summarize(Mean=mean(envy_all))
print(envy_mean)
# Calculate mean for 'envy_all' by 'condition' and subtract a value
cond.means_2 <- data %>%
group_by(condition) %>%
summarize(Mean = mean(envy_all)) %>%
mutate(Mean = Mean - 2.010965)
# Calculate standard error for 'envy_all' by 'condition'
std_errors <- data %>%
group_by(condition) %>%
summarize(Standard_Error = sd(envy_all) / sqrt(n()))
# Combine the dataframes
dosage_data <- data.frame(
condition = cond.means_1$condition,
gratitude_mean = cond.means_1$Mean,
envy_mean = cond.means_2$Mean,
envy_se = std_errors$Standard_Error
)
dosage_data$condition <- factor(dosage_data$condition)
# Create scatter plot with linear regression line
envy_plot <- ggplot(dosage_data, aes(x = gratitude_mean, y = envy_mean, color = condition)) +
geom_point(size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "red", size = 0.5) +
geom_errorbar(aes(ymin = envy_mean - envy_se, ymax = envy_mean + envy_se), width = 0.1) +
scale_color_manual(values = condition_color, labels = condition_name,
name = "Condition") +  # Assign specific colors
labs(title = "Mean Gratitude vs. Mean Envy",
x = "Mean Gratitude",
y = "Mean Envy") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),  # Center the plot title
legend.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()# Set background color to white
)
# Print the plot
print(envy_plot)
=======
print(sad_plot_2)
>>>>>>> 9714c8d9522c404ed68d6b1ad2376f2153cfb9ea
>>>>>>> 3cad3b0fdd695945dd571f7ab334f761d1246a76
ls_mean<-data%>%group_by(condition)%>%summarize(Mean=mean(ls_total))
print(ls_mean)
# Calculate mean for 'ls_total' by 'condition' and subtract the mean of measurement only control
cond.means_2 <- data %>%
group_by(condition) %>%
summarize(Mean = mean(ls_total)) %>%
mutate(Mean = Mean - 4.04)
# Calculate standard error for 'ls_total' by 'condition'
std_errors <- data %>%
group_by(condition) %>%
summarize(Standard_Error = sd(ls_total) / sqrt(n()))
# Create new dataframe
dosage_data <- data.frame(
condition = cond.means_1$condition,
gratitude_mean = cond.means_1$Mean,
ls_mean = cond.means_2$Mean,
ls_se = std_errors$Standard_Error
)
dosage_data$condition <- factor(dosage_data$condition)
# Fit linear regression model
lm_model <- lm(gratitude_mean ~ ls_mean, data = dosage_data)
summary(lm_model)
# Create scatter plot with linear regression line
<<<<<<< HEAD
ls_plot <- ggplot(dosage_data, aes(x = gratitude_mean, y = ls_mean, color = condition)) +
=======
<<<<<<< HEAD
ls_plot <- ggplot(dosage_data, aes(x = gratitude_mean, y = ls_mean, color = condition)) +
=======
ls_plot_2 <- ggplot(dosage_data, aes(x = gratitude_mean, y = ls_mean, color = condition)) +
>>>>>>> 9714c8d9522c404ed68d6b1ad2376f2153cfb9ea
>>>>>>> 3cad3b0fdd695945dd571f7ab334f761d1246a76
geom_point(size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "red", size = 0.5) +
geom_errorbar(aes(ymin = ls_mean - ls_se, ymax = ls_mean + ls_se), width = 0.1) +
scale_color_manual(values = condition_color, labels = condition_name,
<<<<<<< HEAD
name = "Condition") +
labs(title = "Study 1",
x = "Mean Self-Reported Gratitude",
y = "Mean Self-Reported Life Satisfaction") +
=======
name = "Condition") +  # Assign specific colors
<<<<<<< HEAD
labs(title = "Life Satisfaction",
x = "Mean Gratitude",
y = "Mean Satisfaction") +
=======
labs(title = "Study 2",
x = "Mean Self-Reported Gratitude",
y = "Mean Self-Reported LifeSatisfaction") +
>>>>>>> 9714c8d9522c404ed68d6b1ad2376f2153cfb9ea
>>>>>>> 3cad3b0fdd695945dd571f7ab334f761d1246a76
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
# Print the plot
<<<<<<< HEAD
print(ls_plot)
=======
<<<<<<< HEAD
print(ls_plot)
sc_mean<-data%>%group_by(condition)%>%summarize(Mean=mean(sc_total))
print(sc_mean)
# Calculate mean for 'sc_total' by 'condition' and subtract a value
cond.means_2 <- data %>%
group_by(condition) %>%
summarize(Mean = mean(sc_total)) %>%
mutate(Mean = Mean - 3.866228)
# Calculate standard error for 'sc_total' by 'condition'
std_errors <- data %>%
group_by(condition) %>%
summarize(Standard_Error = sd(sc_total) / sqrt(n()))
=======
print(ls_plot_2)
#PA
combined_plot_happy <- happy_plot + theme_settings + theme(legend.position = "none") +
happy_plot_2 + theme_settings + theme(legend.position = "right")
print(combined_plot_happy)
#NA
combined_plot_sad <- sad_plot + theme_settings + theme(legend.position = "none") +
sad_plot_2 + theme_settings + theme(legend.position = "right")
print(combined_plot_sad)
#Life Satisfaction
combined_plot_ls <- ls_plot + theme_settings + theme(legend.position = "none") +
ls_plot_2 + theme_settings + theme(legend.position = "right")
print(combined_plot_ls)
sad_mean<-data%>%group_by(condition)%>%summarize(Mean=mean(sad_all))
print(sad_mean)
# Calculate mean for 'sad_all' by 'condition' and subtract a value
cond.means_2 <- data %>%
group_by(condition) %>%
summarize(Mean = mean(sad_all)) %>%
mutate(Mean = Mean - 2.740132)
# Calculate standard error for 'sad_all' by 'condition'
std_errors <- data %>%
group_by(condition) %>%
summarize(Standard_Error = sd(sad_all) / sqrt(n()))
>>>>>>> 9714c8d9522c404ed68d6b1ad2376f2153cfb9ea
# Combine the dataframes
dosage_data <- data.frame(
condition = cond.means_1$condition,
gratitude_mean = cond.means_1$Mean,
<<<<<<< HEAD
sc_mean = cond.means_2$Mean,
sc_se = std_errors$Standard_Error
)
dosage_data$condition <- factor(dosage_data$condition)
# Create scatter plot with linear regression line
sc_plot <- ggplot(dosage_data, aes(x = gratitude_mean, y = sc_mean, color = condition)) +
geom_point(size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "red", size = 0.5) +
geom_errorbar(aes(ymin = sc_mean - sc_se, ymax = sc_mean + sc_se), width = 0.1) +
scale_color_manual(values = condition_color, labels = condition_name,
name = "Condition") +  # Assign specific colors
labs(title = "Mean Gratitude vs. Mean Social Connection",
x = "Mean Gratitude",
y = "Mean Social Connection") +
=======
sad_mean = cond.means_2$Mean,
sad_se = std_errors$Standard_Error
)
dosage_data$condition <- factor(dosage_data$condition)
# Create scatter plot with linear regression line
sad_plot_2 <- ggplot(dosage_data, aes(x = gratitude_mean, y = sad_mean, color = condition)) +
geom_point(size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "red", size = 0.5) +
geom_errorbar(aes(ymin = sad_mean - sad_se, ymax = sad_mean + sad_se), width = 0.1) +
scale_color_manual(values = condition_color, labels = condition_name,
name = "Condition") +  # Assign specific colors
labs(title = "Study 2",
x = "Mean Self-Reported Gratitude",
y = "Mean Self-Reported NA") +
>>>>>>> 9714c8d9522c404ed68d6b1ad2376f2153cfb9ea
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),  # Center the plot title
legend.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()# Set background color to white
<<<<<<< HEAD
)
# Print the plot
print(sc_plot)
self_image_mean<-data%>%group_by(condition)%>%summarize(Mean=mean(self_image_total))
print(self_image_mean)
# Calculate mean for 'self_image_total' by 'condition' and subtract a value
cond.means_2 <- data %>%
group_by(condition) %>%
summarize(Mean = mean(self_image_total)) %>%
mutate(Mean = Mean - 3.657895)
# Calculate standard error for 'self_image_total' by 'condition'
std_errors <- data %>%
group_by(condition) %>%
summarize(Standard_Error = sd(self_image_total) / sqrt(n()))
# Combine the dataframes
dosage_data <- data.frame(
condition = cond.means_1$condition,
gratitude_mean = cond.means_1$Mean,
self_image_mean = cond.means_2$Mean,
self_image_se = std_errors$Standard_Error
)
dosage_data$condition <- factor(dosage_data$condition)
# Create self_imageatter plot with linear regression line
self_image_plot <- ggplot(dosage_data, aes(x = gratitude_mean, y = self_image_mean, color = condition)) +
geom_point(size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "red", size = 0.5) +
geom_errorbar(aes(ymin = self_image_mean - self_image_se, ymax = self_image_mean + self_image_se), width = 0.1) +
scale_color_manual(values = condition_color, labels = condition_name,
name = "Condition") +  # Assign specific colors
labs(title = "Mean Gratitude vs. Mean Percieved Self Image",
x = "Mean Gratitude",
y = "Mean Percieved Self Image") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),  # Center the plot title
legend.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()# Set background color to white
)
# Print the plot
print(self_image_plot)
ladder_mean<-data%>%group_by(condition)%>%summarize(Mean=mean(ladder))
print(ladder_mean)
# Calculate mean for 'ladder' by 'condition' and subtract a value
cond.means_2 <- data %>%
group_by(condition) %>%
summarize(Mean = mean(ladder)) %>%
mutate(Mean = Mean - 5.782895)
# Calculate standard error for 'ladder' by 'condition'
std_errors <- data %>%
group_by(condition) %>%
summarize(Standard_Error = sd(ladder) / sqrt(n()))
# Combine the dataframes
dosage_data <- data.frame(
condition = cond.means_1$condition,
gratitude_mean = cond.means_1$Mean,
ladder_mean = cond.means_2$Mean,
ladder_se = std_errors$Standard_Error
)
dosage_data$condition <- factor(dosage_data$condition)
# Create self_imageatter plot with linear regression line
ladder_plot <- ggplot(dosage_data, aes(x = gratitude_mean, y = ladder_mean, color = condition)) +
geom_point(size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "red", size = 0.5) +
geom_errorbar(aes(ymin = ladder_mean - ladder_se, ymax = ladder_mean + ladder_se), width = 0.1) +
scale_color_manual(values = condition_color, labels = condition_name,
name = "Condition") +  # Assign specific colors
labs(title = "Mean Gratitude vs. Mean Percieved Self Image",
x = "Mean Gratitude",
y = "Mean Percieved Self Image") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),  # Center the plot title
legend.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()# Set background color to white
)
# Print the plot
print(ladder_plot)
# Set theme settings for larger plots and smaller titles
theme_settings <- list(
plot.title = theme(text = element_text(size = 8, face = "bold")),  # Adjust title size
axis.title = theme(text = element_text(size = 6))    # Adjust axis title size
)
# Combine the plots with adjusted theme settings
combined_plots <- (
(optimistic_plot + theme_settings + theme(legend.position = "none")) +
(happy_plot + theme_settings + theme(legend.position = "none")) +
(sad_plot + theme_settings + theme(legend.position = "none")) +
(ls_plot + theme_settings + theme(legend.position = "right"))
) + plot_layout(guides = "collect")  # Collect legends into one
# Set the size of the plot
options(repr.plot.width = 15, repr.plot.height = 13)  # Adjust width and height as needed
# Print the combined plot
print(combined_plots)
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2',
'qualtRics', 'googlesheets4')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
>>>>>>> 3cad3b0fdd695945dd571f7ab334f761d1246a76
# Dangs API credential at UCSD
qualtrics_api_credentials(
api_key = 'urh7PtWEEOkAzrbjmYQC2FoipCvCT4n8ZIByL5rH',
base_url = 'iad1.qualtrics.com',
install = TRUE,
overwrite = TRUE)
readRenviron("~/.Renviron")
readRenviron("~/.Renviron")
DF <- fetch_survey(surveyID = 'SV_1YQ3FmlbEHp1RIO',
force_request = T,
label = F,
<<<<<<< HEAD
convert = F)
# process data
data <- DF %>%
# remove incomplete or test observations
filter(Finished != "0", condition !="NA")
data$gratitude_all <- rowMeans(data[, c("grateful", "thankful", "appreciative")], na.rm = TRUE)
data$happy_all <- rowMeans(data[, c("happy", "satisfied", "content", "joyful", "pleased")], na.rm = TRUE)
data$optimistic_all <- rowMeans(data[, c("optimistic", "hopeful")], na.rm = TRUE)
data$sad_all <- rowMeans(data[, c("sad", "depressed", "anxious", "nervous")], na.rm = TRUE)
data$indebted_all <- rowMeans(data[, c("indebted", "obligated")], na.rm = TRUE)
data$envy_all <- rowMeans(data[, c("envious", "bitter", "jealous")], na.rm = TRUE)
data$ls_total <- rowMeans(data[, c("ls_1", "ls_2", "ls_3", "ls_4", "ls_5")], na.rm = TRUE)
data$sc_total <- rowMeans(data[, c("sc_1", "sc_2", "sc_3")], na.rm = TRUE)
data$self_image_total <- rowMeans(data[, c("circle_task", "self_image", "signature")], na.rm = TRUE)
library(ggplot2)
library(dplyr)
library(patchwork)
library(scales)
library(qualtRics)
#Condition
condition_color <- c(
"1" = "indianred",
"2" = "lightsalmon",
"3" = "lightgoldenrod",
"4" = "palegreen2",
"5" = "deepskyblue2",
"6" = "orchid",
"7" = "tan",
"8" = "lightblue",
"9" = "lightpink",
"10" = "darkgray",
"11" = "aquamarine")
condition_name <- c(
"1" = "Measurement Only",
"2" = "Events List",
"3" = "Interesting Events List",
"4" = "Hassles List",
"5" = "Gratitude List",
"6" = "Gratitude Letter",
"7" = "Gratitude Text",
"8" = "Chan Gratitude List",
"9" = "Mental Subtraction Task",
"10" = "Gratitude to God List",
"11" = "Gratitude to God Letter")
calculate_std_error <- function(condition_data)
return(sd(condition_data) / sqrt(length(condition_data)))
cond.means_1 <-data%>%group_by(condition)%>%summarize(Mean=mean(gratitude_all))
print(cond.means_1)
# Calculate mean for 'gratitude_all' by 'condition' and subtract a value
cond.means_1 <- data %>%
group_by(condition) %>%
summarize(Mean = mean(gratitude_all)) %>%
mutate(Mean = Mean - 4.502193)
happy_mean<-data%>%group_by(condition)%>%summarize(Mean=mean(happy_all))
print(happy_mean)
# Calculate mean for 'happy_all' by 'condition' and subtract a value
cond.means_2 <- data %>%
group_by(condition) %>%
summarize(Mean = mean(happy_all)) %>%
mutate(Mean = Mean - 3.996053)
# Calculate standard error for 'happy_all' by 'condition'
std_errors <- data %>%
group_by(condition) %>%
summarize(Standard_Error = sd(happy_all) / sqrt(n()))
# Combine the dataframes
dosage_data <- data.frame(
condition = cond.means_1$condition,
gratitude_mean = cond.means_1$Mean,
happy_mean = cond.means_2$Mean,
happy_se = std_errors$Standard_Error
)
dosage_data$condition <- factor(dosage_data$condition)
happy_model <- model <- lm(gratitude_mean ~ happy_mean, data = dosage_data)
print(happy_model)
# Create scatter plot with linear regression line
happy_plot_2 <- ggplot(dosage_data, aes(x = gratitude_mean, y = happy_mean, color = condition)) +
geom_point(size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "red", size = 0.5) +
geom_errorbar(aes(ymin = happy_mean - happy_se, ymax = happy_mean + happy_se), width = 0.1) +
scale_color_manual(values = condition_color, labels = condition_name,
name = "Condition") +  # Assign specific colors
labs(title = "Study 2",
x = "Mean Self-Reported Gratitude",
y = "Mean Self-Reported PA") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),  # Center the plot title
legend.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()# Set background color to white
)
# Print the plot
print(happy_plot_2)
sad_mean<-data%>%group_by(condition)%>%summarize(Mean=mean(sad_all))
print(sad_mean)
# Calculate mean for 'sad_all' by 'condition' and subtract a value
cond.means_2 <- data %>%
group_by(condition) %>%
summarize(Mean = mean(sad_all)) %>%
mutate(Mean = Mean - 2.740132)
# Calculate standard error for 'sad_all' by 'condition'
std_errors <- data %>%
group_by(condition) %>%
summarize(Standard_Error = sd(sad_all) / sqrt(n()))
# Combine the dataframes
dosage_data <- data.frame(
condition = cond.means_1$condition,
gratitude_mean = cond.means_1$Mean,
sad_mean = cond.means_2$Mean,
sad_se = std_errors$Standard_Error
)
dosage_data$condition <- factor(dosage_data$condition)
# Create scatter plot with linear regression line
sad_plot_2 <- ggplot(dosage_data, aes(x = gratitude_mean, y = sad_mean, color = condition)) +
geom_point(size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "red", size = 0.5) +
geom_errorbar(aes(ymin = sad_mean - sad_se, ymax = sad_mean + sad_se), width = 0.1) +
scale_color_manual(values = condition_color, labels = condition_name,
name = "Condition") +  # Assign specific colors
labs(title = "Study 2",
x = "Mean Self-Reported Gratitude",
y = "Mean Self-Reported NA") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),  # Center the plot title
legend.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()# Set background color to white
=======
convert = F) %>%
# remove previews
filter(DistributionChannel != "preview",
Progress > 95) %>%
# select lab identifier
select(lab) %>%
# get lab counts
group_by(lab) %>%
summarise(n = n()) %>%
# add date
mutate(`Last Updated` = Sys.Date())
# specify account to pull from
gs4_auth(email = "globalgratitudecollaboration@gmail.com")
=======
>>>>>>> 3cad3b0fdd695945dd571f7ab334f761d1246a76
)  +
scale_y_continuous(labels = scales::number_format(accuracy = 0.1, decimal.mark = ".", scale = 1))
# Print the plot
print(sad_plot_2)
<<<<<<< HEAD
ls_mean<-data%>%group_by(condition)%>%summarize(Mean=mean(ls_total))
print(ls_mean)
# Calculate mean for 'ls_total' by 'condition' and subtract a value
cond.means_2 <- data %>%
group_by(condition) %>%
summarize(Mean = mean(ls_total)) %>%
mutate(Mean = Mean - 3.825000)
# Calculate standard error for 'ls_total' by 'condition'
std_errors <- data %>%
group_by(condition) %>%
summarize(Standard_Error = sd(ls_total) / sqrt(n()))
# Combine the dataframes
dosage_data <- data.frame(
condition = cond.means_1$condition,
gratitude_mean = cond.means_1$Mean,
ls_mean = cond.means_2$Mean,
ls_se = std_errors$Standard_Error
)
dosage_data$condition <- factor(dosage_data$condition)
# Create scatter plot with linear regression line
ls_plot_2 <- ggplot(dosage_data, aes(x = gratitude_mean, y = ls_mean, color = condition)) +
geom_point(size = 2) +
geom_smooth(method = "lm", se = FALSE, color = "red", size = 0.5) +
geom_errorbar(aes(ymin = ls_mean - ls_se, ymax = ls_mean + ls_se), width = 0.1) +
scale_color_manual(values = condition_color, labels = condition_name,
name = "Condition") +  # Assign specific colors
labs(title = "Study 2",
x = "Mean Self-Reported Gratitude",
y = "Mean Self-Reported LifeSatisfaction") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),  # Center the plot title
legend.title = element_text(face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()# Set background color to white
)
# Print the plot
print(ls_plot_2)
combined_graph_gratitude <- gratitude_graph + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "A.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold") +
gratitude_graph_2 + theme_settings + theme(legend.position = "right") +
annotate("text", x = -Inf, y = Inf, label = "B.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold")
print (combined_graph_gratitude)
combined_graph_happy <- happy_graph + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "A.", vjust = 1.2, hjust = -0.4,
family = "sans", fontface = "bold") +
happy_graph_2 + theme_settings + theme(legend.position = "right") +
annotate("text", x = -Inf, y = Inf, label = "B.", vjust = 1.2, hjust = -0.4,
family = "sans", fontface = "bold") +
happy_plot + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "C.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold") +
happy_plot_2 + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "D.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold")
print (combined_graph_happy)
combined_graph_happy <- happy_graph + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "A.", vjust = 0.7, hjust = -0.4,
family = "sans", fontface = "bold") +
happy_graph_2 + theme_settings + theme(legend.position = "right") +
annotate("text", x = -Inf, y = Inf, label = "B.", vjust = 0.7, hjust = -0.4,
family = "sans", fontface = "bold") +
happy_plot + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "C.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold") +
happy_plot_2 + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "D.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold")
print (combined_graph_happy)
combined_graph_happy <- happy_graph + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "A.", vjust = 0.7, hjust = -0.4,
family = "sans", fontface = "bold") +
happy_graph_2 + theme_settings + theme(legend.position = "right") +
annotate("text", x = -Inf, y = Inf, label = "B.", vjust = 0.7, hjust = -0.4,
family = "sans", fontface = "bold")
print (combined_graph_happy)
combined_graph_happy <- happy_graph + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "A.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold") +
happy_graph_2 + theme_settings + theme(legend.position = "right") +
annotate("text", x = -Inf, y = Inf, label = "B.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold")
print (combined_graph_happy)
combined_graph_happy <- happy_graph + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "A.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold") +
happy_graph_2 + theme_settings + theme(legend.position = "right") +
annotate("text", x = -Inf, y = Inf, label = "B.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold")
combined_plot_happy <- happy_plot + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "C.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold") +
happy_plot_2 + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "D.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold")
print (combined_graph_happy)
combined_graph_happy <- happy_graph + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "A.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold") +
happy_graph_2 + theme_settings + theme(legend.position = "right") +
annotate("text", x = -Inf, y = Inf, label = "B.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold")
combined_plot_happy <- happy_plot + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "C.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold") +
happy_plot_2 + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "D.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold")
print (combined_graph_happy)
print (combined_plot_happy)
combined_graph_happy <- happy_graph + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "A.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold") +
happy_graph_2 + theme_settings + theme(legend.position = "right") +
annotate("text", x = -Inf, y = Inf, label = "B.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold")
combined_plot_happy <- happy_plot + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "C.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold") +
happy_plot_2 + theme_settings + theme(legend.position = "right") +
annotate("text", x = -Inf, y = Inf, label = "D.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold")
print (combined_graph_happy)
print (combined_plot_happy)
combined_graph_sad <- sad_graph + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "A.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold") +
sad_graph_2 + theme_settings + theme(legend.position = "right") +
annotate("text", x = -Inf, y = Inf, label = "B.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold")
combined_plot_sad <- sad_plot + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "C.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold") +
sad_plot_2 + theme_settings + theme(legend.position = "right") +
annotate("text", x = -Inf, y = Inf, label = "D.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold")
print (combined_graph_sad)
print (combined_plot_sad)
combined_graph_ls <- ls_graph + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "A.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold") +
ls_graph_2 + theme_settings + theme(legend.position = "right") +
annotate("text", x = -Inf, y = Inf, label = "B.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold")
combined_plot_ls <- ls_plot + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "C.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold") +
ls_plot_2 + theme_settings + theme(legend.position = "right") +
annotate("text", x = -Inf, y = Inf, label = "D.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold")
print (combined_graph_ls)
print (combined_plot_ls)
combined_graph_gratitude <- gratitude_graph + theme_settings + theme(legend.position = "none") +
annotate("text", x = -Inf, y = Inf, label = "A.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold") +
gratitude_graph_2 + theme_settings + theme(legend.position = "right") +
annotate("text", x = -Inf, y = Inf, label = "B.", vjust = 1, hjust = -0.4,
family = "sans", fontface = "bold")
print (combined_graph_gratitude)
## --------------------------------------------------------------------------------------
# clear environment
rm(list = ls())
# install (if necessary) and load packages
# function written by stevenworthington
Ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, 'Package'])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# vector of necessary packages
packages <- c('tidyverse', 'ggplot2',
'qualtRics', 'googlesheets4')
# using vector of packages, call ipak function
Ipak(packages)
# delete vestigial
rm(packages, Ipak)
## --------------------------------------------------------------------------------------
# Dangs API credential at UCSD
qualtrics_api_credentials(
api_key = 'urh7PtWEEOkAzrbjmYQC2FoipCvCT4n8ZIByL5rH',
base_url = 'iad1.qualtrics.com',
install = TRUE,
overwrite = TRUE)
readRenviron("~/.Renviron")
## --------------------------------------------------------------------------------------
# fetch survey
DF <- fetch_survey(surveyID = 'SV_1YQ3FmlbEHp1RIO',
force_request = T,
label = F,
convert = F)
# fix known issues
DF <- DF %>%
# 4/22/2024 TUR_01 used real link for testing purposes
filter(ResponseId != "R_42KUGZSS76NgWH7",
ResponseId != "R_4W4EXfgeyk1rCYF",
ResponseId != "R_45Z862EIfzYcin4",
ResponseId != "R_7BhJx9Ci7THupmF",
ResponseId != "R_42Lv9fg5qi9V9xm",
ResponseId != "R_2kFa26mh78uevnz",
ResponseId != "R_4DRThnH8LgbEvM8",
ResponseId != "R_4r1kAEqQCo1PNn6",
ResponseId != "R_4GQErqyYDlRWVwZ",
ResponseId != "R_4SGF0GCHSHIN0ls",
ResponseId != "R_6Pndj5c7sr1pcU3",
ResponseId != "R_8lQxsY2ITg7HKh1")
# calculate n total
n.total <- DF %>%
filter(DistributionChannel != "preview") %>%
group_by(lab) %>%
summarise(`n (total)` = n())
# calculate n consenting
n.consent <- DF %>%
filter(DistributionChannel != "preview",
consent == 1) %>%
group_by(lab) %>%
summarise(`n (consenting)` = n())
# calculate summary statistics for consenting complete participants
n.complete <- DF %>%
filter(DistributionChannel != "preview",
consent == 1,
Progress > 95) %>%
group_by(lab) %>%
summarise(`n (consenting and complete)` = n(),
`mean duration (mins)` =
mean(`Duration (in seconds)`) / 60,
`median duration (mins)` =
median(`Duration (in seconds)`) / 60)
# combine summaries
summary <-
full_join(x = n.total,
y = n.consent) %>%
full_join(x = .,
y = n.complete) %>%
# remove NA's
#filter(!is.na(lab)) %>%
# round duration statistics
mutate(`mean duration (mins)` =
round(x = `mean duration (mins)`,
digits = 2),
`median duration (mins)` =
round(x = `median duration (mins)`,
digits = 2)) %>%
# add date
mutate(`Last updated` = Sys.Date())
## --------------------------------------------------------------------------------------
# specify account to pull from
gs4_auth(email = "globalgratitudecollaboration@gmail.com")
# worksheet name
ss = "https://docs.google.com/spreadsheets/d/13nRnKz6_VAiPSJmg7pHIy1ehNXtmrQUEhsCH7QHS2uI/edit?usp=sharing"
# update lab counts
sheet_write(data = summary,
ss = ss,
sheet = "DataTracker")
## --------------------------------------------------------------------------------------
## Data checks on our end
# completion
DF %>%
filter(consent == 1,
Progress < 90) %>%
group_by(condition) %>%
summarise(m.prog = mean(Progress),
n = n())
# reliability
for(l in c("POL_01", "DNK_01", "MYS_01")){
d <- DF %>%
filter(lab == l,
DistributionChannel != "preview",
consent == 1)
# calculate reliability statistics
cbind(
lab = l,
pa = psych::alpha(x = d %>%
select(happy, satisfied, content, joyful, pleased))$total$raw_alpha,
optimism = psych::alpha(x = d %>%
select(optimistic, hopeful))$total$raw_alpha,
na = psych::alpha(x = d %>%
select(sad, depressed, anxious, nervous))$total$raw_alpha,
indebt = psych::alpha(x = d %>%
select(indebted, obligated))$total$raw_alpha,
envy = psych::alpha(x = d %>%
select(envious, bitter, jealous))$total$raw_alpha,
swl = psych::alpha(x = d %>%
select(ls_1, ls_2, ls_3, ls_4, ls_5))$total$raw_alpha,
self = psych::alpha(x = d %>%
select(self_image_circle, self_image))$total$raw_alpha) %>%
as.data.frame() %>%
print()
}
View(DF)
USA_02 <- DF  %>% filter(lab == "USA_02")
View(USA_02)
=======
>>>>>>> 9714c8d9522c404ed68d6b1ad2376f2153cfb9ea
>>>>>>> 3cad3b0fdd695945dd571f7ab334f761d1246a76
